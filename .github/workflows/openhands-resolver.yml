          # Set up Vercel authentication
          echo "Setting up Vercel authentication..."
          # The token is automatically used when set as environment variable
          
          # Check if project exists, if not create it
          if [ -n "$VERCEL_PROJECT_ID" ]; then
            # Use existing project ID
            echo "Using existing Vercel project: $VERCEL_PROJECT_ID"
            if ! vercel deploy --prod --token="$VERCEL_TOKEN" > deployment_output.txt 2>&1; then
              echo "Deployment failed. Output:"
              cat deployment_output.txt
              exit 1
            fi
          else
            # Create new project and deploy
            PROJECT_NAME="${VERCEL_PROJECT_NAME:-$(basename ${{ github.repository }})}"
            echo "Creating new Vercel project: $PROJECT_NAME"
            
            # First, link/create the project
            echo "Linking Vercel project..."
            if ! vercel --token="$VERCEL_TOKEN" --scope="$VERCEL_ORG_ID" --yes > link_output.txt 2>&1; then
              echo "Project linking failed. Output:"
              cat link_output.txt
              exit 1
            fi
            
            # Then deploy
            echo "Deploying to production..."
            if ! vercel deploy --prod --token="$VERCEL_TOKEN" > deployment_output.txt 2>&1; then
              echo "Deployment failed. Output:"
              cat deployment_output.txt
              exit 1
            fi
          fi

->

          # Set up Vercel authentication
          echo "Setting up Vercel authentication..."
          # Create .vercelrc file for authentication
          echo "{\"token\":\"$VERCEL_TOKEN\"}" > ~/.vercelrc
          
          # Check if project exists, if not create it
          if [ -n "$VERCEL_PROJECT_ID" ]; then
            # Use existing project ID - create vercel.json with project config
            echo "Using existing Vercel project: $VERCEL_PROJECT_ID"
            echo "{\"projectId\":\"$VERCEL_PROJECT_ID\",\"orgId\":\"$VERCEL_ORG_ID\"}" > .vercel/project.json
            mkdir -p .vercel
            if ! vercel deploy --prod > deployment_output.txt 2>&1; then
              echo "Deployment failed. Output:"
              cat deployment_output.txt
              exit 1
            fi
          else
            # Create new project and deploy
            PROJECT_NAME="${VERCEL_PROJECT_NAME:-$(basename ${{ github.repository }})}"
            echo "Creating new Vercel project: $PROJECT_NAME"
            
            # Try to deploy directly - Vercel will create the project automatically
            echo "Deploying and creating project..."
            if ! vercel deploy --prod --name="$PROJECT_NAME" > deployment_output.txt 2>&1; then
              echo "Deployment failed. Output:"
              cat deployment_output.txt
              
              # Fallback: try without --name flag
              echo "Retrying deployment without project name..."
              if ! vercel deploy --prod > deployment_output.txt 2>&1; then
                echo "Deployment failed again. Output:"
                cat deployment_output.txt
                exit 1
              fi
            fi
          fi
